{"version":3,"sources":["components/MovieCard.js","components/Loading.js","services/movieData.js","services/movieAPI.js","pages/MovieList.js","components/MovieForm.js","pages/MovieDetails.js","pages/NotFound.js","pages/EditMovie.js","pages/NewMovie.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","movie","this","props","className","data-testid","alt","src","imagePath","title","storyline","rating","to","id","React","Component","Loading","movies","subtitle","bookmarked","genre","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","getMovie","movieId","find","mov","parseInt","Promise","resolve","setTimeout","MovieList","state","loading","moviesApi","setState","map","key","MovieForm","handleSubmit","bind","onSubmit","field","newValue","placeholder","type","value","onChange","event","updateMovie","target","htmlFor","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","MovieDetails","movieGet","match","params","movieAPI","filter","status","NotFound","EditMovie","shouldRedirect","updatedMovie","NewMovie","newMovie","movieData","nextId","length","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8435f606.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    return (\n      <div className=\"moviecard\" data-testid=\"movie-card\">\n        <div className=\"moviecard-p\">\n          <img alt=\"Poster Movie\" src={movie.imagePath} />\n          <p className=\"title\">{movie.title}</p>\n          <p className=\"sinopse\">{movie.storyline}</p>\n          <p className=\"rating\">Rating: {movie.rating}</p>\n        </div>\n        <Link className=\"btn-link\" to={`/movies/${movie.id}`}>\n          VER DETALHES\n        </Link>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number,\n    imagePath: PropTypes.string,\n    rating: PropTypes.any,\n    storyline: PropTypes.string,\n    subtitle: PropTypes.string,\n    title: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return <div>Carregando...</div>;\n  }\n}\n\nexport default Loading;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\n\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    setTimeout(() => {\n      const movies = readMovies();\n      resolve(movies);\n    }, 2000);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(movie);\n    }, 2000);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => {\n  const movies = readMovies().map((movie) => {\n    if (movie.id === parseInt(updatedMovie.id, 10)) {\n      return { ...movie, ...updatedMovie };\n    }\n    return movie;\n  });\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const createMovie = (movieData) => {\n  let movies = readMovies();\n  const nextId = movies[movies.length - 1].id + 1;\n  const newMovie = { ...movieData, id: nextId };\n  movies = [...movies, newMovie];\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({ status: 'OK' });\n    }, 1000);\n  });\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport MovieCard from '../components/MovieCard';\nimport Loading from '../components/Loading';\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      movies: '',\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.moviesApi();\n  }\n\n  async moviesApi() {\n    this.setState({ movies: await movieAPI.getMovies() });\n    this.setState({ loading: false });\n  }\n\n  loading(movies) {\n    if (this.state.loading === true) return <Loading />;\n    return (\n      <div>\n        <Link to=\"/movies/new\">ADICIONAR CARTÃO</Link>\n        <div className=\"container\" data-testid=\"movie-list\">\n          {movies.map((movie) => (\n            <MovieCard key={movie.title} movie={movie} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { movies } = this.state;\n    return this.loading(movies);\n  }\n}\n\nexport default MovieList;\n","import React from 'react';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n    return (\n      <div>\n        <input\n          placeholder=\"Insira o título\"\n          id=\"movie_title\"\n          type=\"text\"\n          className=\"validate\"\n          value={title}\n          onChange={(event) => this.updateMovie('title', event.target.value)}\n        />\n        <label htmlFor=\"movie_title\">Título</label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <input\n          placeholder=\"Insira o subtítulo\"\n          id=\"movie_subtitle\"\n          type=\"text\"\n          value={subtitle}\n          onChange={(event) => this.updateMovie('subtitle', event.target.value)}\n        />\n        <label htmlFor=\"movie_subtitle\">Subtítulo</label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <input\n          placeholder=\"Insira o caminho da imagem\"\n          id=\"movie_image\"\n          type=\"text\"\n          value={imagePath}\n          onChange={(event) => this.updateMovie('imagePath', event.target.value)}\n        />\n        <label htmlFor=\"movie_image\">Imagem</label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <textarea\n          id=\"movie_storyline\"\n          value={storyline}\n          onChange={(event) => this.updateMovie('storyline', event.target.value)}\n        />\n        <label htmlFor=\"movie_storyline\">Sinopse</label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">Gênero</label>\n        <select\n          id=\"movie_genre\"\n          value={genre}\n          onChange={(event) => this.updateMovie('genre', event.target.value)}\n        >\n          <option value=\"action\">Ação</option>\n          <option value=\"comedy\">Comédia</option>\n          <option value=\"thriller\">Suspense</option>\n          <option value=\"fantasy\">Fantasia</option>\n        </select>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n\n    return (\n      <div>\n        <input\n          placeholder=\"Dê a avaliação do filme\"\n          id=\"movie_rating\"\n          type=\"number\"\n          step={0.1}\n          min={0}\n          max={5}\n          value={rating}\n          onChange={(event) => this.updateMovie('rating', event.target.value)}\n        />\n        <label htmlFor=\"movie_rating\">Avaliação</label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button type=\"button\" onClick={this.handleSubmit}>\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default MovieForm;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      movie: '',\n    };\n  }\n  componentDidMount() {\n    this.movieGet();\n  }\n\n  async movieGet() {\n    const { id } = this.props.match.params;\n    this.setState({ movie: await movieAPI.getMovie(id), loading: false });\n  }\n\n  render() {\n    if (this.state.loading === true) {\n      return <Loading />;\n    }\n    const { id, title, storyline, imagePath, genre, rating, subtitle } = this.state.movie;\n    return (\n      <div data-testid=\"movie-details\">\n        <img alt=\"Movie Cover\" src={`../${imagePath}`} />\n        <p>{`Título: ${title}`}</p>\n        <p>{`Subtítulo: ${subtitle}`}</p>\n        <p>{`Sinopse: ${storyline}`}</p>\n        <p>{`Gênero: ${genre}`}</p>\n        <p>{`Avaliação: ${rating}`}</p>\n        <Link to={`/movies/${id}/edit`}>EDITAR</Link>\n        <Link to=\"/\">VOLTAR</Link>\n        <Link to=\"/\" onClick={() => movieAPI.deleteMovie(id)}>\n          DELETAR\n        </Link>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.any,\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import { Redirect } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Loading from '../components/Loading';\nimport { MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: '',\n      status: true,\n      shouldRedirect: false,\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.movieGet();\n  }\n\n  handleSubmit(updatedMovie) {\n    movieAPI.updateMovie(updatedMovie);\n    this.setState({ shouldRedirect: true });\n  }\n\n  async movieGet() {\n    const { id } = this.props.match.params;\n    this.setState({ movie: await movieAPI.getMovie(id) });\n    this.setState({ status: false });\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect === true) return <Redirect to=\"/\" />;\n    if (status === true) return <Loading />;\n\n    return (\n      <div data-testid=\"edit-movie\">\n        <MovieForm movie={movie} onSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.any,\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shouldRedirect: false,\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(newMovie) {\n    movieAPI.createMovie(newMovie);\n    this.setState({ shouldRedirect: true });\n  }\n\n  render() {\n    if (this.state.shouldRedirect) return <Redirect to=\"/\" />;\n    return (\n      <div data-testid=\"new-movie\">\n        <MovieForm onSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport MovieList from './pages/MovieList';\nimport MovieDetails from './pages/MovieDetails';\nimport NotFound from './pages/NotFound';\nimport EditMovie from './pages/EditMovie';\nimport NewMovie from './pages/NewMovie';\nimport './style.css';\n\nfunction App() {\n  return (\n    <div>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={MovieList} />\n          <Route exact path=\"/movies/new\" component={NewMovie} />\n          <Route exact path=\"/movies/:id\" component={MovieDetails} />\n          <Route exact path=\"/movies/:id/edit\" component={EditMovie} />\n          <Route component={NotFound} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}